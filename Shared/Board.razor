@inject ConnectFour.Shared.GameState State
@using System.Drawing
@using System.Threading.Tasks;

<HeadContent>
  <style>
    :root {
      --board-bg: @ColorTranslator.ToHtml(BoardColor);
      --player1: @ColorTranslator.ToHtml(Player1Color);
      --player2: @ColorTranslator.ToHtml(Player2Color);
      --currentPlayer: @ColorTranslator.ToHtml(CurrentPlayerColor);
    }
  </style>
</HeadContent>

<div class="container">
  <article class="score">
    <span>Player 1: @PP1</span>
    <span>@PlayerTwo: @PP2</span>
  </article>

  <article class="alert">
    <span class="alert-info">@CurrentTurn</span>
    <span>@WinnerMessage</span>
    <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <span class="alert-danger">@ErrorMessage</span>
  </article>

  <nav class="pieces">
    <span style="@OnFocusCol[0]" title="Click to play a piece" @onclick="() => PlayPiece(0)"
    @onmouseover="() => FocusCol(0)"></span>
    <span style="@OnFocusCol[1]" title="Click to play a piece" @onclick="() => PlayPiece(1)"
    @onmouseover="() => FocusCol(1)"></span>
    <span style="@OnFocusCol[2]" title="Click to play a piece" @onclick="() => PlayPiece(2)"
    @onmouseover="() => FocusCol(2)"></span>
    <span style="@OnFocusCol[3]" title="Click to play a piece" @onclick="() => PlayPiece(3)"
    @onmouseover="() => FocusCol(3)"></span>
    <span style="@OnFocusCol[4]" title="Click to play a piece" @onclick="() => PlayPiece(4)"
    @onmouseover="() => FocusCol(4)"></span>
    <span style="@OnFocusCol[5]" title="Click to play a piece" @onclick="() => PlayPiece(5)"
    @onmouseover="() => FocusCol(5)"></span>
    <span style="@OnFocusCol[6]" title="Click to play a piece" @onclick="() => PlayPiece(6)"
    @onmouseover="() => FocusCol(6)"></span>
  </nav>

  <div class="contBoard">
    <div class="board">
      @for (var i = 0; i < 42; i++)
      {
        <span class="space">
          <span class="backfill"></span>
        </span>
      }
    </div>
    @for (var i = 0; i < 42; i++)
    {
      <span class="@Pieces[i]"></span>
    }
  </div>
</div>

@code {
  private string[] Pieces = new string[42];
  private string WinnerMessage = string.Empty;
  private string ErrorMessage = string.Empty;
  private string[] OnFocusCol = new string[7];
  private string PlayerTwo = string.Empty;
  private int PP1 = 0;
  private int PP2 = 0;
  private string CurrentTurn => (WinnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
  private string ResetStyle => (WinnerMessage == string.Empty) ? "display: none;" : "";
  private string PlayAgainstMachineStyle => (WinnerMessage == string.Empty && !State.TwoPlayers) ? "" : "display: none;";



  private async void PlayPiece(byte col)
  {
    if (State.TwoPlayers || (!State.TwoPlayers && State.PlayerTurn == 1))
    {
      ErrorMessage = string.Empty;
      try
      {
        CurrentPlayerColor = State.PlayerTurn == 1 ? Player1Color : Player2Color;
        var landingRow = State.PlayPiece(col);
        var cssClass = $"player{State.PlayerTurn} col{col} drop{landingRow}";
        Pieces[State.CurrentTurn - 1] = cssClass;
      }
      catch (ArgumentException ex)
      {
        ErrorMessage = ex.Message;
      }
      WinnerMessage = State.CheckForWin() switch
      {
        GameState.WinState.Player1_Wins => "Player 1 Wins!",
        GameState.WinState.Player2_Wins => "Player 2 Wins!",
        GameState.WinState.Tie => "It's a tie!",
        _ => ""
      };
      if(WinnerMessage == "Player 1 Wins!"){
        PP1 += 1;
      }
      if(WinnerMessage == "Player 2 Wins!"){
        PP2 += 1;
      }
      if (WinnerMessage == string.Empty && !State.TwoPlayers && State.PlayerTurn == 2)
      {
        await Task.Delay(500);
        PlayAgainstMachine();
      }
    }
  }


  private void PlayAgainstMachine()
  {
    ErrorMessage = string.Empty;
    try
    {
      CurrentPlayerColor = State.PlayerTurn == 1 ? Player1Color : Player2Color;
      int col = State.RandomColumn();
      var landingRow = State.PlayAgainstMachine(col);
      var cssClass = $"player{State.PlayerTurn} col{col} drop{landingRow}";
      Pieces[State.CurrentTurn - 1] = cssClass;
    }
    catch (ArgumentException ex)
    {
      ErrorMessage = ex.Message;
    }
    WinnerMessage = State.CheckForWin() switch
    {
      GameState.WinState.Player1_Wins => "Player 1 Wins!",
      GameState.WinState.Player2_Wins => "Player 2 Wins!",
      GameState.WinState.Tie => "It's a tie!",
      _ => ""
    };
  }

  private void FocusCol(byte col)
  {
    ErrorMessage = string.Empty;
    try
    {
      for (int i = 0; i < OnFocusCol.Length; i++)
      {
        OnFocusCol[i] = "opacity: 0";
      }
      OnFocusCol[col] = "opacity: 1";
    }
    catch (ArgumentException ex)
    {
      ErrorMessage = ex.Message;
    }
  }

  void ResetGame()
  {
    State.ResetBoard();
    WinnerMessage = string.Empty;
    ErrorMessage = string.Empty;
    Pieces = new string[42];
    CurrentPlayerColor = System.Drawing.Color.FromArgb(196, 42, 61);
  }

  [Parameter()]
  public Color BoardColor { get; set; }
  = ColorTranslator.FromHtml("yellow");

  [Parameter()]
  public Color Player1Color { get; set; }
  = ColorTranslator.FromHtml("red");

  [Parameter()]
  public Color Player2Color { get; set; }
  = ColorTranslator.FromHtml("blue");

  [Parameter()]
  public Color CurrentPlayerColor { get; set; }
  = ColorTranslator.FromHtml("red");

  protected override void OnInitialized()
  {
    State.ResetBoard();
    PlayerTwo = State.TwoPlayers ? "Player 2" : "CPU";
  }
}